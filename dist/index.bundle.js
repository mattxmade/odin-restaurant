"use strict";(self.webpackChunkodin_restaurant=self.webpackChunkodin_restaurant||[]).push([[826],{426:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(537),o=n.n(a),i=n(645),s=n.n(i)()(o());s.push([e.id,"* {\n  margin: 0;\n  padding: 0;\n  outline: 0.1rem dashed red;\n}\n\n:root {\n  font-size: 62.5%;\n}\n\nbody {\n  width: 100%;\n  font-size: 1.6rem;\n}\n\nmain {\n  display: grid;\n  justify-content: center;\n  background-color: pink;\n  position: relative;\n}\n\nmain ul {\n  padding: 2rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  list-style: none;\n}\n\n.home-tab {\n  gap: 1rem;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 100rem;\n  margin: 0 2rem 2rem;\n  border-radius: 2rem;\n  background-color: pink;\n  padding: 0 2rem 2rem;\n  overflow: hidden;\n}\n\n.home-tab h1,\n.home-tab p {\n  z-index: 1;\n}\n\n.hero-image {\n  width: 50rem;\n  height: auto;\n}/*# sourceMappingURL=style.css.map */","",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style.css"],names:[],mappings:"AAOA;EACE,SAAA;EACA,UAAA;EACA,0BAAA;ACNF;;ADSA;EACE,gBAAA;ACNF;;ADSA;EACE,WAAA;EACA,iBAAA;ACNF;;ADSA;EACE,aAAA;EACA,uBAAA;EACA,sBAAA;EAEA,kBAAA;ACPF;;ADUA;EACE,aAAA;EACA,aAAA;EACA,mBAAA;EACA,6BAAA;EACA,gBAAA;ACPF;;ADUA;EACE,SAAA;EACA,aAAA;EACA,mBAAA;EACA,sBAAA;EACA,uBAAA;EAEA,iBAAA;EACA,mBAAA;EACA,mBAAA;EACA,sBAAA;EAEA,oBAAA;EACA,gBAAA;ACTF;;ADcA;;EAEE,UAAA;ACXF;;ADcA;EACE,YAAA;EACA,YAAA;ACXF,CAAA,oCAAA",sourceRoot:""}]);const r=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(a)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);a&&s[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(o," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},s=[],r=0;r<e.length;r++){var c=e[r],l=a.base?c[0]+a.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var u=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=o(p,a);a.byIndex=r,t.splice(r,0,{identifier:d,updater:m,references:1})}s.push(d)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=a(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var r=n(i[s]);t[r].references--}for(var c=a(e,o),l=0;l<i.length;l++){var A=n(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,o&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},963:(e,t,n)=>{var a=n(379),o=n.n(a),i=n(795),s=n.n(i),r=n(569),c=n.n(r),l=n(565),A=n.n(l),d=n(216),u=n.n(d),p=n(589),m=n.n(p),b=n(426),y={};y.styleTagTransform=m(),y.setAttributes=A(),y.insert=c().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=u(),o()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;const h=n.p+"donee.webp";function f(){const e=document.createElement("div");e.className="home-tab";const t=document.createElement("img");t.src=h,t.className="hero-image",e.append(t);const n=document.createElement("h1");n.className="hero-title",n.textContent="HotDamn!",e.appendChild(n);const a=document.createElement("p");return a.className="hero-blurb",a.textContent="Cupcake ipsum dolor sit amet caramels candy canes. Bonbon macaroon pudding marshmallow apple pie. Chocolate cake icing sesame snaps bonbon powder caramels gingerbread. Tiramisu candy canes marzipan cotton candy chupa chups pie. Lemon drops cheesecake bear claw cotton candy tart. Cake pie carrot cake ice cream gummi bears. Muffin pudding marshmallow danish sugar plum marzipan. Lemon drops powder gummies toffee soufflé cheesecake topping jelly-o sugar plum. Gummi bears gummi bears cake toffee pudding dessert. Croissant marzipan brownie fruitcake ice cream. Ice cream cheesecake cheesecake toffee biscuit. Dessert jelly topping gummies jelly toffee gummi bears. Soufflé cheesecake gummi bears carrot cake donut chocolate bar donut lollipop. Cheesecake sweet roll chocolate shortbread jelly bonbon bonbon chocolate bar cheesecake.",e.appendChild(a),{tab:e,img:t,h1:n,content:a}}window.onload=()=>{const e=document.querySelector("body"),t=document.createElement("div"),n=document.createElement("main");e.appendChild(t),t.appendChild(n);const a=document.createElement("ul");n.appendChild(a);const o=[];for(let e=0;e<3;e++){let t=document.createElement("li");switch(t.style.cursor="pointer",e){case 0:t.textContent="Home";break;case 1:t.textContent="Menu";break;case 2:t.textContent="Contact"}o.push(t),a.appendChild(t)}const i=f(),s=f(),r=f();s.tab.style.backgroundColor="white",r.tab.style.backgroundColor="lightblue",n.appendChild(i.tab),n.appendChild(s.tab),n.appendChild(r.tab),i.tab.style.zIndex=1,s.tab.style.zIndex=0,s.tab.style.position="absolute",s.tab.style.visibility="hidden",r.tab.style.zIndex=0,r.tab.style.position="absolute",r.tab.style.visibility="hidden",s.h1.textContent="Menu",r.h1.textContent="Contact",o.forEach((e=>{e.addEventListener("click",(()=>{switch(console.log(e.textContent),e.textContent){case"Home":i.tab.style.zIndex=1,i.tab.style.position="relative",i.tab.style.visibility="visible",s.tab.style.zIndex=0,s.tab.style.position="absolute",s.tab.style.visibility="hidden",r.tab.style.zIndex=0,r.tab.style.position="absolute",r.tab.style.visibility="hidden";break;case"Menu":s.tab.style.zIndex=1,s.tab.style.position="relative",s.tab.style.visibility="visible",i.tab.style.zIndex=0,i.tab.style.position="absolute",i.tab.style.visibility="hidden",r.tab.style.zIndex=0,r.tab.style.position="absolute",r.tab.style.visibility="hidden";break;case"Contact":r.tab.style.zIndex=1,r.tab.style.position="relative",r.tab.style.visibility="visible",i.tab.style.zIndex=0,i.tab.style.position="absolute",i.tab.style.visibility="hidden",s.tab.style.zIndex=0,s.tab.style.position="absolute",s.tab.style.visibility="hidden"}}))}))}}},e=>{e(e.s=963)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,